# -*- coding: utf-8 -*-
"""metrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pQrBJZI1gkFlb_BmwOtB4z_5tRTXdJuL
"""

import pandas as pd
import numpy as np
from IPython.display import display, clear_output
import ipywidgets import widgets
from preprocess import height_to_inches
from viz import create_grid_graphic

def process_selected_player(player_row):
    """Processes the selected player and calculates percentiles, then displays the grid."""
    clear_output(wait=True)  #Clear selection UI

    player_name = player_row['Player']
    position = player_row['Pos']

    player_metrics = ['Ht', 'Wt', '40yd', 'Vertical', 'Bench', 'Broad Jump', '3Cone', 'Shuttle']
    percentiles_dict = {}

    pos_df = df[df['Pos'] == position].copy()

    for metric in player_metrics:
        if metric == 'Ht':
            pos_df['Ht_in'] = pd.to_numeric(pos_df['Ht'].apply(height_to_inches), errors='coerce')
            metric_data = pos_df['Ht_in'].dropna()
            player_value = height_to_inches(player_row['Ht'])
        else:
            pos_df[metric] = pd.to_numeric(pos_df[metric], errors='coerce').astype(float)
            pos_df[metric] = pos_df[metric].replace(0, pd.NA)
            metric_data = pos_df[metric].dropna()
            player_value = pd.to_numeric(player_row[metric], errors='coerce')

        if metric_data.empty:
            percentiles_dict[metric] = None
            continue

        if pd.isna(player_value):
            percentiles_dict[metric] = None
        else:
            if metric in ['40yd', '3Cone', 'Shuttle']:
                percentile = (metric_data > player_value).mean()
            else:
                percentile = (metric_data < player_value).mean()

            percentiles_dict[metric] = round(percentile * 100, 1)


    create_grid_graphic(player_name, percentiles_dict, position, player_row)

def rate(player_name):
    clear_output(wait=True)  #Clear previous output

    df['Player'] = df['Player'].astype('string').str.strip()
    player_rows = df[df['Player'] == player_name]

    if player_rows.empty:
        print(f"{player_name} not found in dataset")
        return

    if len(player_rows) > 1:
        print(f"Multiple players named {player_name} found. Select one:")

        buttons = []
        for _, row in player_rows.iterrows():
            button_label = f"{row['Player']} - {row['Pos']} - Draft Year {row['Year']}"
            button = widgets.Button(description=button_label, layout=widgets.Layout(width='50%'))
            button.on_click(lambda b, r=row: process_selected_player(r))
            buttons.append(button)

        display(*buttons)
    else:
        process_selected_player(player_rows.iloc[0])