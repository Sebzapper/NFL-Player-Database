# -*- coding: utf-8 -*-
"""nfl_combine_explorer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KgGIk3e98_yljEcIPX0bQvlzSDRBRgyp
"""

# Commented out IPython magic to ensure Python compatibility.
# %run ../scripts/scraper.py  #adjust path if needed

import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output

from scripts.metrics import rate  #This is okay to import

#Prepare the dropdown options in the format "Player, School"
df['Dropdown_Label'] = df['Player'] + ', ' + df['School'].astype(str)
all_players = [''] + sorted(df['Dropdown_Label'].dropna().unique())

#Output display widget
output = widgets.Output()

#Filter input box
filter_input = widgets.Text(
    value='',
    description='Filter:',
    layout={'width': '50%', 'margin': '0 0 10px 0'}
)

#Dropdown selector
player_dropdown = widgets.Dropdown(
    options=all_players,
    description='Select a player:',
    layout={'width': '50%'},
    style={'description_width': 'initial'}
)

#Filter logic
def on_filter_change(change):
    with output:
        clear_output()
        search_term = change['new'].strip()
        if search_term:
            search_term_lower = search_term.lower()
            filtered_df = df[df['Player'].str.lower().str.startswith(search_term_lower, na=False)][['Player', 'School']]
            if not filtered_df.empty:
                display(filtered_df)
                filtered_labels = [''] + sorted(filtered_df['Player'] + ', ' + filtered_df['School'].astype(str))
                player_dropdown.options = filtered_labels
            else:
                print(f"No players found starting with '{search_term}'")
                player_dropdown.options = ['']
        else:
            print("Type a player's name to filter")
            player_dropdown.options = all_players

#Handle selection
def on_dropdown_change(change):
    selected_label = change['new']
    if selected_label:
        player_name = selected_label.split(',')[0].strip()
        filter_input.value = ''
        with output:
            clear_output()
        rate(player_name, df)

#Event listeners
filter_input.observe(on_filter_change, names='value')
player_dropdown.observe(on_dropdown_change, names='value')

#Show UI
display(filter_input)
display(output)
display(player_dropdown)